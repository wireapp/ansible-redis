---
- name: initialize sentinel reconfigure flag
  set_fact:
    reconfig_sentinel: false

- name: check if we need to force sentinels to listen globally.
  lineinfile:
    path: /etc/redis/sentinel.conf
    regex: "^bind 0.0.0.0"
    state: absent
  check_mode: true
  changed_when: false
  register: bind_present

- name: register results.
  set_fact:
    reconfig_sentinel: true
  when: not bind_present.changed

- name: check if we need to force sentinels to announce on their external IP.
  lineinfile:
    path: /etc/redis/sentinel.conf
    regex: '^sentinel announce-ip "{{ ansible_eth0.ipv4.address }}"'
    state: absent
  check_mode: true
  changed_when: false
  register: announce_ip_present

- name: register results.
  set_fact:
    reconfig_sentinel: true
  when: not announce_ip_present.changed

- name: pause sentinels
  systemd:
    name: redis-sentinel
    state: stopped
  when: reconfig_sentinel

- name: ensure sentinels bind to 0.0.0.0
  lineinfile:
    path: /etc/redis/sentinel.conf
    regexp: '^bind'
    line: 'bind 0.0.0.0'
  when: reconfig_sentinel

- name: ensure sentinels announce their external IP address
  lineinfile:
    path: /etc/redis/sentinel.conf
    regexp: '^sentinel announce-ip'
    line: 'sentinel announce-ip "{{ ansible_eth0.ipv4.address }}"'
  when: reconfig_sentinel

- name: resume sentinels
  systemd:
    name: redis-sentinel
    state: started
    daemon_reload: true
  when: reconfig_sentinel

- name: initialize redis protected mode flag
  set_fact:
    disable_protected_mode: false

- name: check if redis is in protected mode.
  command: redis-cli config get protected-mode
  register: protected_mode
  changed_when: false

- name: register results.
  set_fact:
    disable_protected_mode: true
  when: '"yes" in protected_mode.stdout'

- name: disable redis protected mode.
  command: redis-cli config set protected-mode no
  when: disable_protected_mode


- name: initialize initialize redis flag
  set_fact:
    initialize_redis: false

- name: check if redis has been initialized by ansible.
  command: redis-cli get ansiblelovesme
  register: ansiblelovesme
  changed_when: false

- name: register results
  set_fact:
    initialize_ansible: true
  when: '"1" not in ansiblelovesme.stdout'

- name: register results
  set_fact:
    initialize_ansible: false
  when: '"1" in ansiblelovesme.stdout'

- name: register all results
  set_fact:
    initialize_ansible_all: '{{ groups ["redis"] | map("extract", hostvars, ["initialize_ansible"]) | join (" ") }}'

# FIXME: shouldn't this be none are true?
- name: plan to initialize redis from scratch
  set_fact:
    initialize_redis: false

# FIXME: shouldn't this be none are true?
- name: plan to initialize redis from scratch
  set_fact:
    initialize_redis: true
  when: '"False" not in initialize_ansible_all'

- name: pick a host at random
  set_fact:
    random_host="{{ groups['redis'] | random }}"
  when: ansible_hostname == 'instance'

- name: propogate our decision
  set_fact:
    random_host="{{ hostvars['instance']['random_host'] }}"
  run_once: true

- name: promote a random host.
  shell: redis-cli -h {{ hostvars[random_host]['ansible_eth0']['ipv4']['address'] }} INCR ansiblelovesme
  when: initialize_redis
  run_once: true

- name: add slave nodes as slave of master.
  shell: MASTER={{ hostvars[random_host]['ansible_eth0']['ipv4']['address'] }} && redis-cli slaveof $MASTER {{ redis_port }}
  when: ansible_hostname != random_host and initialize_redis

- name: force sentinels to forget their current master
  shell: redis-cli -p {{ redis_sentinel_port }} sentinel remove mymaster
  when: initialize_redis

- name: tell sentinels who their master is
  shell: MASTER={{ hostvars[random_host]['ansible_eth0']['ipv4']['address'] }} && redis-cli -p {{ redis_sentinel_port }} sentinel monitor mymaster $MASTER {{ redis_port }} $((({{groups['redis'] | length}}/2)+1))
  when: initialize_redis

- name: force sentinels to redetect eachother
  shell: redis-cli -p {{ redis_sentinel_port }} sentinel reset '*'
  run_once: true
  when: initialize_redis
